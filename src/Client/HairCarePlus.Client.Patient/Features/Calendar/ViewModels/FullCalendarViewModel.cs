using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using HairCarePlus.Client.Patient.Features.Calendar.Models;
using HairCarePlus.Client.Patient.Features.Calendar.Services;
using HairCarePlus.Client.Patient.Features.Calendar.Services.Interfaces;
using Microsoft.Maui.Controls;
using INotificationsService = HairCarePlus.Client.Patient.Features.Notifications.Services.Interfaces.INotificationService;
using Microsoft.Extensions.Logging;
using HairCarePlus.Client.Patient.Features.Notifications.Services.Interfaces;
using Microsoft.Maui.ApplicationModel;

namespace HairCarePlus.Client.Patient.Features.Calendar.ViewModels
{
    public class AdaptiveDayViewModel : BaseViewModel
    {
        private DateTime _date;
        private bool _isCurrentMonth;
        private bool _isToday;
        private bool _isSelected;
        private ObservableCollection<CalendarEvent> _events = new();

        public DateTime Date
        {
            get => _date;
            set => SetProperty(ref _date, value);
        }

        public bool IsCurrentMonth
        {
            get => _isCurrentMonth;
            set => SetProperty(ref _isCurrentMonth, value);
        }

        public bool IsToday
        {
            get => _isToday;
            set => SetProperty(ref _isToday, value);
        }

        public bool IsSelected
        {
            get => _isSelected;
            set => SetProperty(ref _isSelected, value);
        }

        public ObservableCollection<CalendarEvent> Events
        {
            get => _events;
            set => SetProperty(ref _events, value);
        }

        public int Day => Date.Day;
        
        public bool HasEvents => Events.Count > 0;
        
        public bool HasMedicationEvents => Events.Any(e => e.EventType == EventType.MedicationTreatment);
        
        public bool HasPhotoEvents => Events.Any(e => e.EventType == EventType.Photo);
        
        public bool HasRestrictionEvents => Events.Any(e => e.EventType == EventType.CriticalWarning);
        
        public bool HasInstructionEvents => Events.Any(e => e.EventType == EventType.VideoInstruction);
        
        public bool HasExcessEvents => Events.Count > 3;
        
        public string ExcessEventsText => $"+{Events.Count - 3}";
    }

    public class DayEventsGroup : BaseViewModel
    {
        private TimeOfDay _timeOfDay;
        private ObservableCollection<CalendarEvent> _events = new();

        public TimeOfDay TimeOfDay
        {
            get => _timeOfDay;
            set => SetProperty(ref _timeOfDay, value);
        }

        public ObservableCollection<CalendarEvent> Events
        {
            get => _events;
            set => SetProperty(ref _events, value);
        }

        public string Header
        {
            get
            {
                return TimeOfDay switch
                {
                    TimeOfDay.Morning => "üåÖ –£—Ç—Ä–æ",
                    TimeOfDay.Afternoon => "‚òÄÔ∏è –î–µ–Ω—å",
                    TimeOfDay.Evening => "üåô –í–µ—á–µ—Ä",
                    _ => string.Empty
                };
            }
        }
        
        public bool HasEvents => Events.Count > 0;
    }

    public class FullCalendarViewModel : BaseViewModel
    {
        private readonly ICalendarService _calendarService;
        private readonly INotificationsService _notificationService;
        private readonly IEventAggregationService _eventAggregationService;
        private readonly ILogger<FullCalendarViewModel> _logger;

        private DateTime _currentMonthDate;
        private DateTime _selectedDate;
        private bool _isMonthViewVisible = true;
        private ObservableCollection<AdaptiveDayViewModel> _days = new();
        private ObservableCollection<DayEventsGroup> _dayEventsGroups = new();
        private bool _hasEvents;
        private string _errorMessage;
        private bool _hasError;

        public DateTime CurrentMonthDate
        {
            get => _currentMonthDate;
            set
            {
                if (SetProperty(ref _currentMonthDate, value))
                {
                    LoadMonthEventsAsync().ConfigureAwait(false);
                }
            }
        }

        public string CurrentMonthYear => CurrentMonthDate.ToString("MMMM yyyy");

        public DateTime SelectedDate
        {
            get => _selectedDate;
            set
            {
                if (SetProperty(ref _selectedDate, value))
                {
                    LoadDayEventsAsync().ConfigureAwait(false);
                }
            }
        }

        public string SelectedDateText => SelectedDate.ToString("d MMMM");

        public bool IsMonthViewVisible
        {
            get => _isMonthViewVisible;
            set => SetProperty(ref _isMonthViewVisible, value);
        }

        public ObservableCollection<AdaptiveDayViewModel> Days
        {
            get => _days;
            set => SetProperty(ref _days, value);
        }

        public ObservableCollection<DayEventsGroup> DayEventsGroups
        {
            get => _dayEventsGroups;
            set => SetProperty(ref _dayEventsGroups, value);
        }
        
        public bool HasEvents
        {
            get => _hasEvents;
            set => SetProperty(ref _hasEvents, value);
        }

        public string ErrorMessage
        {
            get => _errorMessage;
            set => SetProperty(ref _errorMessage, value);
        }

        public bool HasError
        {
            get => _hasError;
            set => SetProperty(ref _hasError, value);
        }

        public ICommand PreviousMonthCommand { get; }
        public ICommand NextMonthCommand { get; }
        public ICommand DaySelectedCommand { get; }
        public ICommand GoToTodayCommand { get; }
        public ICommand BackToMonthViewCommand { get; }
        public ICommand MarkEventCompletedCommand { get; }
        public ICommand RefreshCommand { get; }

        public FullCalendarViewModel(
            ICalendarService calendarService,
            INotificationsService notificationService,
            IEventAggregationService eventAggregationService,
            ILogger<FullCalendarViewModel>? logger = null)
        {
            Title = "–ö–∞–ª–µ–Ω–¥–∞—Ä—å";
            _calendarService = calendarService ?? throw new ArgumentNullException(nameof(calendarService));
            _notificationService = notificationService ?? throw new ArgumentNullException(nameof(notificationService));
            _eventAggregationService = eventAggregationService ?? throw new ArgumentNullException(nameof(eventAggregationService));
            _logger = logger;
            
            _logger?.LogInformation("FullCalendarViewModel constructor called");
            
            CurrentMonthDate = DateTime.Today;
            SelectedDate = DateTime.Today;

            PreviousMonthCommand = new Command(ExecutePreviousMonth);
            NextMonthCommand = new Command(ExecuteNextMonth);
            DaySelectedCommand = new Command<DateTime>(ExecuteDaySelected);
            GoToTodayCommand = new Command(ExecuteGoToToday);
            BackToMonthViewCommand = new Command(ExecuteBackToMonthView);
            MarkEventCompletedCommand = new Command<CalendarEvent>(MarkEventCompleted);
            RefreshCommand = new Command(async () => await RefreshCalendarAsync());

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã —Å–æ–±—ã—Ç–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
            DayEventsGroups.Add(new DayEventsGroup { TimeOfDay = TimeOfDay.Morning });
            DayEventsGroups.Add(new DayEventsGroup { TimeOfDay = TimeOfDay.Afternoon });
            DayEventsGroups.Add(new DayEventsGroup { TimeOfDay = TimeOfDay.Evening });

            _logger?.LogInformation("Commands initialized");
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            Task.Run(RefreshCalendarAsync);
        }

        private void ExecutePreviousMonth()
        {
            CurrentMonthDate = CurrentMonthDate.AddMonths(-1);
        }

        private void ExecuteNextMonth()
        {
            CurrentMonthDate = CurrentMonthDate.AddMonths(1);
        }

        private void ExecuteDaySelected(DateTime date)
        {
            SelectedDate = date;
            IsMonthViewVisible = false;
        }

        private void ExecuteGoToToday()
        {
            CurrentMonthDate = DateTime.Today;
            SelectedDate = DateTime.Today;
        }

        private void ExecuteBackToMonthView()
        {
            IsMonthViewVisible = true;
        }

        private async void MarkEventCompleted(CalendarEvent calendarEvent)
        {
            if (calendarEvent == null) return;

            try
            {
                calendarEvent.IsCompleted = !calendarEvent.IsCompleted;
                await _calendarService.MarkEventAsCompletedAsync(calendarEvent.Id, calendarEvent.IsCompleted);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º UI
                OnPropertyChanged(nameof(DayEventsGroups));
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error marking event as completed: {ex}");
            }
        }

        private async Task RefreshCalendarAsync()
        {
            try
            {
                HasError = false;
                ErrorMessage = string.Empty;
                IsBusy = true;
                
                _logger?.LogInformation("Refreshing calendar data");
                
                await LoadMonthEventsAsync();
                await LoadDayEventsAsync();
                
                _logger?.LogInformation("Calendar refreshed successfully");
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, "Error refreshing calendar");
                HasError = true;
                ErrorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await MainThread.InvokeOnMainThreadAsync(() =>
                {
                    return Application.Current.MainPage.DisplayAlert("–û—à–∏–±–∫–∞", ErrorMessage, "OK");
                });
            }
            finally
            {
                IsBusy = false;
            }
        }

        private async Task LoadMonthEventsAsync()
        {
            try
            {
                _logger?.LogInformation($"Loading events for month {CurrentMonthDate:yyyy-MM}");
                
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
                Days.Clear();
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
                var firstDayOfMonth = new DateTime(CurrentMonthDate.Year, CurrentMonthDate.Month, 1);
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–π —Å–µ—Ç–∫–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞)
                var firstDayOfCalendar = firstDayOfMonth.AddDays(-(int)firstDayOfMonth.DayOfWeek);
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –º–µ—Å—è—Ü–∞
                var events = await _calendarService.GetEventsForMonthAsync(CurrentMonthDate.Year, CurrentMonthDate.Month);
                
                _logger?.LogInformation($"Retrieved {events?.Count() ?? 0} events for month {CurrentMonthDate:yyyy-MM}");
                
                // –°–æ–∑–¥–∞–µ–º –¥–Ω–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (42 –¥–Ω—è - 6 –Ω–µ–¥–µ–ª—å)
                var currentDate = firstDayOfCalendar;
                for (int i = 0; i < 42; i++)
                {
                    var day = new AdaptiveDayViewModel
                    {
                        Date = currentDate,
                        IsCurrentMonth = currentDate.Month == CurrentMonthDate.Month,
                        IsToday = currentDate.Date == DateTime.Today,
                        IsSelected = currentDate.Date == SelectedDate.Date,
                        Events = new ObservableCollection<CalendarEvent>(
                            events?.Where(e => e.Date.Date == currentDate.Date)?.ToList() ?? new List<CalendarEvent>())
                    };
                    
                    Days.Add(day);
                    currentDate = currentDate.AddDays(1);
                }
                
                _logger?.LogInformation("Successfully populated calendar days");
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, $"Error loading month events for {CurrentMonthDate:yyyy-MM}");
                HasError = true;
                ErrorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
                throw; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ RefreshCalendarAsync
            }
        }

        private async Task LoadDayEventsAsync()
        {
            try
            {
                _logger?.LogInformation($"Loading events for day {SelectedDate:yyyy-MM-dd}");
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
                var events = await _calendarService.GetEventsForDateAsync(SelectedDate);
                
                _logger?.LogInformation($"Retrieved {events?.Count() ?? 0} events for day {SelectedDate:yyyy-MM-dd}");
                
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
                var morningEvents = events?.Where(e => e.TimeOfDay == TimeOfDay.Morning)?.ToList() ?? new List<CalendarEvent>();
                var afternoonEvents = events?.Where(e => e.TimeOfDay == TimeOfDay.Afternoon)?.ToList() ?? new List<CalendarEvent>();
                var eveningEvents = events?.Where(e => e.TimeOfDay == TimeOfDay.Evening)?.ToList() ?? new List<CalendarEvent>();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã
                DayEventsGroups[0].Events = new ObservableCollection<CalendarEvent>(morningEvents);
                DayEventsGroups[1].Events = new ObservableCollection<CalendarEvent>(afternoonEvents);
                DayEventsGroups[2].Events = new ObservableCollection<CalendarEvent>(eveningEvents);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —Å–æ–±—ã—Ç–∏–π
                HasEvents = events?.Any() ?? false;
                
                _logger?.LogInformation("Successfully loaded day events");
            }
            catch (Exception ex)
            {
                _logger?.LogError(ex, $"Error loading day events for {SelectedDate:yyyy-MM-dd}");
                HasError = true;
                ErrorMessage = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";
                throw; // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ RefreshCalendarAsync
            }
        }
    }
} 